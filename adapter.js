// Адаптер — это структурный паттерн проектирования,
// который позволяет объектам с несовместимыми интерфейсами работать вместе.

// Вот простой пример. Усовно у нас есть мок дата на которой прилоежине работает корректно
// А нам вдруг нужно быстренько подтянуть дату с API
// Так как стандартная труктура даты отличается от новой
// Вместо того, чтобы полностью переписывать логику мока мы
// Адаптируем данные , которые получили с сервера 
// И создаем из них новую структуру , которая отлично работает на предыдущем варианте программы

class AfricanLion  {
    roar() {}
}

class AsianLion  {
    roar() {}
}

class Hunter {
    hunt(lion) {
        lion.roar()
    }
}
class WildDog {
    bark() {
    }
}

class WildDogAdapter {

    constructor(dog) {
        this.dog = dog;
    }
    
    roar() {
        this.dog.bark();
    }
}

wildDog = new WildDog()
wildDogAdapter = new WildDogAdapter(wildDog)

hunter = new Hunter()
hunter.hunt(wildDogAdapter)

// P.S. для особо сведущих если вспомните одно из заданий это было применено на дату в формате JSON =)